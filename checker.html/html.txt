<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>نظام إنذار مخصص لسفارات برلين وبروكسل</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;700;900&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Cairo', sans-serif;
        }
        .status-card {
            transition: all 0.3s ease-in-out;
        }
        .shadow-green {
            box-shadow: 0 0 35px rgba(34, 197, 94, 0.7);
        }
        .shadow-red {
            box-shadow: 0 0 25px rgba(239, 68, 68, 0.6);
        }
        .shadow-yellow {
            box-shadow: 0 0 25px rgba(245, 158, 11, 0.6);
        }
        .shadow-blue {
            box-shadow: 0 0 25px rgba(59, 130, 246, 0.6);
        }
        .pulsate-open {
            animation: pulsate-open 1.5s infinite;
        }
        @keyframes pulsate-open {
            0% { transform: scale(1); box-shadow: 0 0 25px rgba(34, 197, 94, 0.7); }
            50% { transform: scale(1.03); box-shadow: 0 0 45px rgba(52, 211, 153, 1); }
            100% { transform: scale(1); box-shadow: 0 0 25px rgba(34, 197, 94, 0.7); }
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200">
    <div class="container mx-auto p-4 md:p-8 max-w-2xl">
        
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-blue-600 dark:text-blue-400">نظام إنذار مخصص لسفارات برلين وبروكسل</h1>
            <p class="mt-2 text-lg text-gray-600 dark:text-gray-400">احصل على تنبيه فقط عند توفر المواعيد التي تهمك</p>
        </header>

        <main>
            <!-- Status Display Card -->
            <div id="status-card" class="status-card border-4 rounded-xl p-8 mb-6 text-center shadow-lg shadow-blue bg-white dark:bg-gray-800">
                <h2 class="text-xl font-semibold mb-4 text-gray-700 dark:text-gray-300">حالة المواعيد في برلين/بروكسل:</h2>
                <div id="status-indicator" class="text-4xl md:text-5xl font-extrabold py-4 rounded-lg transition-colors duration-300">
                    <span id="status-text">...</span>
                    <div id="loader" class="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mt-2"></div>
                </div>
                <div id="action-container" class="mt-6 hidden">
                    <p class="text-lg font-semibold text-green-700 dark:text-green-300 mb-4">تحرك فوراً!</p>
                    <a href="https://www.ecsc-expat.sy/" target="_blank" id="booking-btn" class="inline-block bg-green-500 hover:bg-green-600 text-white font-bold text-2xl py-4 px-8 rounded-lg shadow-lg transition-transform transform hover:scale-110">
                        اذهب لصفحة الحجز الآن
                    </a>
                </div>
                <p id="last-checked" class="mt-4 text-sm text-gray-500 dark:text-gray-400">آخر تحديث: لم يتم التحقق بعد</p>
            </div>

            <!-- Controls -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
                <button id="check-now-btn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-transform transform hover:scale-105 disabled:bg-blue-300 disabled:cursor-not-allowed">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 inline-block ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>
                    <span>تحقق الآن</span>
                </button>
                <div class="flex items-center justify-center bg-white dark:bg-gray-800 p-3 rounded-lg shadow-md">
                    <input type="checkbox" id="auto-refresh-checkbox" class="h-5 w-5 rounded text-blue-600 focus:ring-blue-500" checked>
                    <label for="auto-refresh-checkbox" class="mr-3 text-gray-700 dark:text-gray-300">تحديث تلقائي (كل دقيقتين)</label>
                </div>
            </div>

            <!-- Instructions -->
            <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md">
                <h3 class="text-xl font-bold mb-4 text-blue-600 dark:text-blue-400">طريقة العمل الجديدة</h3>
                <ol class="list-decimal list-inside space-y-3 text-gray-700 dark:text-gray-300">
                    <li>الأداة تبحث الآن تحديداً عن مواعيد في <strong>برلين وبروكسل</strong>.</li>
                    <li><strong>الحالة الخضراء + صوت الإنذار:</strong> تعني أنه تم رصد مواعيد في برلين أو بروكسل. تحرك فوراً!</li>
                    <li><strong>الحالة الصفراء (بدون صوت):</strong> تعني أن نظام الحجز مفتوح لسفارات أخرى، ولكن ليس لبرلين أو بروكسل.</li>
                    <li><strong>الحالة الحمراء:</strong> تعني أن النظام مغلق بالكامل.</li>
                </ol>
            </div>
        </main>
    </div>

    <script>
        // DOM Elements
        const statusCard = document.getElementById('status-card');
        const statusText = document.getElementById('status-text');
        const loader = document.getElementById('loader');
        const lastCheckedText = document.getElementById('last-checked');
        const checkNowBtn = document.getElementById('check-now-btn');
        const autoRefreshCheckbox = document.getElementById('auto-refresh-checkbox');
        const actionContainer = document.getElementById('action-container');

        // State & Config
        let autoRefreshInterval = null, soundInterval = null, isChecking = false, audioContext;
        const TARGET_URL = 'https://www.ecsc-expat.sy/';
        const BOOKING_PAGE_URL = 'https://www.ecsc-expat.sy/user/reservation/create'; // The page where embassies are listed
        const PROXY_URL_PREFIX = `https://corsproxy.io/?`;
        const CLOSED_KEYWORDS = ['لا يوجد مواعيد متاحة حالياً', 'حجز المواعيد متوقف حالياً', 'نعتذر عن استقبال طلبات جديدة'];

        function playNotificationSound() {
            if (!audioContext) {
                try { audioContext = new (window.AudioContext || window.webkitAudioContext)(); } 
                catch (e) { console.error("Web Audio API not supported.", e); return; }
            }
            if (soundInterval) clearInterval(soundInterval);
            const playSound = () => {
                if (audioContext.state === 'suspended') audioContext.resume();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                oscillator.type = 'triangle';
                oscillator.frequency.setValueAtTime(880, audioContext.currentTime);
                gainNode.gain.setValueAtTime(0.5, audioContext.currentTime);
                oscillator.start();
                gainNode.gain.exponentialRampToValueAtTime(0.0001, audioContext.currentTime + 0.5);
                oscillator.stop(audioContext.currentTime + 0.5);
            };
            playSound();
            soundInterval = setInterval(playSound, 2000); 
        }

        function stopSound() {
            if (soundInterval) clearInterval(soundInterval);
            soundInterval = null;
        }
        
        function updateUI(status, message) {
            loader.style.display = 'none';
            statusText.textContent = message;
            
            statusCard.classList.remove('border-green-500', 'shadow-green', 'pulsate-open', 'border-red-500', 'shadow-red', 'border-yellow-500', 'shadow-yellow', 'border-blue-500', 'shadow-blue');
            statusText.classList.remove('text-green-500', 'text-red-500', 'text-yellow-500');
            actionContainer.classList.add('hidden');
            stopSound();

            switch(status) {
                case 'OPEN_SPECIFIC':
                    statusCard.classList.add('border-green-500', 'shadow-green', 'pulsate-open');
                    statusText.classList.add('text-green-500');
                    actionContainer.classList.remove('hidden');
                    playNotificationSound();
                    break;
                case 'OPEN_OTHER':
                    statusCard.classList.add('border-yellow-500', 'shadow-yellow');
                    statusText.classList.add('text-yellow-500');
                    break;
                case 'CLOSED':
                    statusCard.classList.add('border-red-500', 'shadow-red');
                    statusText.classList.add('text-red-500');
                    break;
                case 'ERROR':
                    statusCard.classList.add('border-yellow-500', 'shadow-yellow');
                    statusText.classList.add('text-yellow-500');
                    break;
                case 'LOADING':
                case 'LOADING_SPECIFIC':
                    loader.style.display = 'block';
                    statusText.textContent = message;
                    statusCard.classList.add('border-blue-500', 'shadow-blue');
                    break;
                default:
                    statusCard.classList.add('border-blue-500', 'shadow-blue');
            }
        }

        async function checkStatus() {
            if (isChecking) return;
            isChecking = true;
            checkNowBtn.disabled = true;
            updateUI('LOADING', 'يتم التحقق من النظام...');

            try {
                // Stage 1: Check main site status
                const mainProxyUrl = `${PROXY_URL_PREFIX}${encodeURIComponent(TARGET_URL)}`;
                const mainResponse = await fetch(mainProxyUrl);
                if (!mainResponse.ok) throw new Error(`Proxy Error (Main): ${mainResponse.status}`);
                const mainHtml = await mainResponse.text();
                
                if (CLOSED_KEYWORDS.some(keyword => mainHtml.includes(keyword))) {
                    updateUI('CLOSED', 'النظام مغلق حالياً');
                    return;
                }

                // Stage 2: If open, check the specific booking page for Berlin/Brussels
                updateUI('LOADING_SPECIFIC', 'النظام مفتوح، جارٍ البحث عن برلين/بروكسل...');
                const bookingProxyUrl = `${PROXY_URL_PREFIX}${encodeURIComponent(BOOKING_PAGE_URL)}`;
                const bookingResponse = await fetch(bookingProxyUrl);
                if (!bookingResponse.ok) throw new Error(`Proxy Error (Booking): ${bookingResponse.status}`);

                const bookingHtml = await bookingResponse.text();
                const foundEmbassies = [];
                if (bookingHtml.includes('برلين')) foundEmbassies.push('برلين');
                if (bookingHtml.includes('بروكسل')) foundEmbassies.push('بروكسل');

                if (foundEmbassies.length > 0) {
                    updateUI('OPEN_SPECIFIC', `مفتوح! تم رصد: ${foundEmbassies.join(' و ')}`);
                } else {
                    updateUI('OPEN_OTHER', 'النظام مفتوح (لكن ليس لبرلين أو بروكسل)');
                }

            } catch (error) {
                console.error('Error checking status:', error);
                updateUI('ERROR', 'خطأ في التحقق، قد يكون الموقع تحت الصيانة');
            } finally {
                isChecking = false;
                checkNowBtn.disabled = false;
                const now = new Date();
                lastCheckedText.textContent = `آخر تحديث: ${now.toLocaleTimeString('ar-EG')}`;
            }
        }

        function setupAutoRefresh() {
             if (autoRefreshCheckbox.checked) {
                if (!autoRefreshInterval) {
                    checkStatus(); 
                    autoRefreshInterval = setInterval(checkStatus, 2 * 60 * 1000); 
                }
            } else {
                if (autoRefreshInterval) {
                    clearInterval(autoRefreshInterval);
                    autoRefreshInterval = null;
                }
            }
        }

        document.addEventListener('DOMContentLoaded', setupAutoRefresh);
        checkNowBtn.addEventListener('click', () => {
            if (!audioContext) {
                try { audioContext = new (window.AudioContext || window.webkitAudioContext)(); }
                catch (e) { console.error("Could not create AudioContext.", e); }
            }
            stopSound();
            checkStatus();
        });
        autoRefreshCheckbox.addEventListener('change', setupAutoRefresh);

        updateUI('INITIAL', 'اضغط للتحقق أو انتظر التحديث التلقائي');
        loader.style.display = 'none';

    </script>
</body>
</html>
